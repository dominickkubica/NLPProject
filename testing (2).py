# -*- coding: utf-8 -*-
"""Testing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CWP-z75Q3XaFbPs0Wwhrp5tmNWC4RmVo
"""

import streamlit as st
from langchain_ollama import ChatOllama
import requests
from bs4 import BeautifulSoup

# Scraping and processing the content
def scrape_content(urls):
    content_dict = {}
    for url in urls:
        try:
            response = requests.get(url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "html.parser")
                paragraphs = soup.find_all("p")
                content = " ".join(para.get_text() for para in paragraphs)
                content_dict[url] = content
            else:
                content_dict[url] = f"Failed to retrieve content. Status code: {response.status_code}"
        except Exception as e:
            content_dict[url] = f"Error occurred: {str(e)}"
    return content_dict

# Generate scholarship matches based on student profile
def generate_response(student_profile, knowledge_base):
    llm = ChatOllama(model="llama3")
    # Combine the knowledge base into a single context for the LLM
    context = "\n\n".join(f"Source: {url}\n{content}" for url, content in knowledge_base.items())
    prompt = f"""
    You are a scholarship chatbot. Use the following context to match the student profile to relevant scholarships:
    {context}

    Student Profile:
    Name: {student_profile['name']}
    Age: {student_profile['age']}
    Gender: {student_profile['gender']}
    GPA: {student_profile['gpa']}
    Major: {student_profile['major']}
    School Year: {student_profile['school_year']}
    Financial Need: {student_profile['financial_need']}
    Ethnicity: {student_profile['ethnicity']}
    State of Residence: {student_profile['residence_state']}
    Physical Disabilities: {student_profile['physical_disabilities']}
    Scholarship Types: {', '.join(student_profile['scholarship_type'])}
    Causes: {', '.join(student_profile['causes'])}

    Match scholarships to this student's profile.
    """
    response = llm.invoke(prompt).content
    return response

# URLs for scraping
urls = [
    "https://www.scu.edu/financialaid/cost-of-attendance/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/federal-grants/",
    "https://www.scu.edu/financialaid/deadlines/",
    "https://www.scu.edu/financialaid/financial-aid-basics/satisfactory-academic-progress---graduate/",
    "https://www.scu.edu/financialaid/financial-aid-basics/satisfactory-academic-progress---undergraduate/",
    "https://www.scu.edu/financialaid/new-fafsa-for-2024-2025/",
    "https://www.scu.edu/johnsonscholars/about-the-programaward/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/cal-grants/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/university-grants/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/merit-scholarships/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/academic-scholarships/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/outside-scholarships/",
    "https://www.scu.edu/financialaid/types-of-aid/federal-work-study/",
    "https://www.scu.edu/financialaid/types-of-aid/loans/",
    "https://www.scu.edu/financialaid/types-of-aid/graduate-aid-programs/",
    "https://bold.org/scholarships/new-beginnings-immigrant-scholarship/",
    "https://www.alert-1.com/company/scholarship/6747",
    "https://www.blankstyle.com/blankstyle-scholarship-fund",
    "https://www.latutors123.com/scholarships/innovation-in-education/",
    "https://lambprize.org/eligibility-selection-criteria-application-guidance/"
]

# Streamlit app
def main():
    st.title("Scholarship Finder Bot üéì")
    st.markdown(
        """
        Welcome to the Scholarship Finder Bot!
        Fill out your profile below, and we'll help you find scholarships that match your profile.
        """
    )

    # Scrape content and create knowledge base
    with st.spinner("Scraping content and preparing knowledge base..."):
        knowledge_base = scrape_content(urls)

    # Section 1: Basic Information
    st.header("üìù Basic Information")
    name = st.text_input("What is your full name?")
    age = st.number_input("Enter your age:", min_value=0, max_value=100, value=18)
    gender = st.selectbox("Select your gender:", ["Male", "Female", "Non-Binary", "Prefer Not to Say"])

    # Section 2: Academic Information
    st.header("üìö Academic Information")
    gpa = st.slider("Enter your GPA:", 0.0, 4.0, 3.0, step=0.1)
    major = st.text_input("Enter your academic major:")
    school_year = st.selectbox(
        "Select your school year:",
        ["High School Senior", "College Freshman", "Sophomore", "Junior", "Senior", "Graduate Student"]
    )

    # Section 3: Financial and Demographic Information
    st.header("üíµ Financial and Demographic Information")
    financial_need = st.selectbox("Do you require financial need-based scholarships?", ["Yes", "No"])
    ethnicity = st.text_input("Enter your ethnicity (optional):")
    residence_state = st.text_input("Enter your state of residence:")
    physical_disabilities = st.selectbox("Do you have any physical disabilities?", ["Yes", "No"])

    # Section 4: Preferences
    st.header("üéØ Preferences")
    scholarship_type = st.multiselect(
        "What types of scholarships are you interested in?",
        [
            "Merit Scholarships",
            "Need-Based Scholarships",
            "Federal Grants",
            "Athletic Scholarships",
            "Artistic Scholarships",
            "Graduate Aid",
            "Other"
        ]
    )
    causes = st.multiselect(
        "Select causes or values important to you (e.g., community service, sustainability, etc.):",
        ["Community Service", "Sustainability", "Social Justice", "Diversity", "STEM", "Arts"]
    )

    # Section 5: Submit Button
    if st.button("Find Scholarships"):
        # Combine all user inputs into a profile dictionary
        student_profile = {
            "name": name,
            "age": age,
            "gender": gender,
            "gpa": gpa,
            "major": major,
            "school_year": school_year,
            "financial_need": financial_need,
            "ethnicity": ethnicity,
            "residence_state": residence_state,
            "physical_disabilities": physical_disabilities,
            "scholarship_type": scholarship_type,
            "causes": causes
        }

        with st.spinner("Generating response..."):
            response = generate_response(student_profile, knowledge_base)
        st.success("Scholarships matching your profile:")
        st.write(response)

# Run the app
if __name__ == "__main__":
    main()